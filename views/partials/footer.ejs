<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.js" type="text/javascript"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/highcharts-more.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script> 
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>

<script src="/js/highcharts.js"></script>
<!-- jQuery -->
<script src="/vendor/jquery/jquery.min.js"></script>

<!-- Bootstrap Core JavaScript -->
<script src="/vendor/bootstrap/js/bootstrap.min.js"></script>

<!-- Metis Menu Plugin JavaScript -->
<script src="/vendor/metisMenu/metisMenu.min.js"></script>

<!-- Morris Charts JavaScript -->
<script src="/vendor/raphael/raphael.min.js"></script>
<script src="/vendor/morrisjs/morris.min.js"></script>
<script src="/data/morris-data.js"></script>

<!-- Custom Theme JavaScript -->
<script src="/dist/js/sb-admin-2.js"></script>

<!-- Flot Charts JavaScript -->
<!-- <script src="../vendor/flot/excanvas.min.js"></script>
<script src="../vendor/flot/jquery.flot.js"></script>
<script src="../vendor/flot/jquery.flot.pie.js"></script>
<script src="../vendor/flot/jquery.flot.resize.js"></script>
<script src="../vendor/flot/jquery.flot.time.js"></script>
<script src="../vendor/flot-tooltip/jquery.flot.tooltip.min.js"></script>
<script src="../data/flot-data.js"></script> -->

<script type="text/javascript">
// Create a client instance: Broker, Port, Websocket Path, Client ID
client = new Paho.MQTT.Client("broker.mqttdashboard.com", Number(8000),"/mqtt");

//, "clientId-w2EhjzIOuO"
// // set callback handlers
// client.onConnectionLost = function (responseObject) {
//     console.log("Connection Lost: "+responseObject.errorMessage);
// }

// client.onMessageArrived = function (message) {
//   console.log("Message Arrived: "+message.payloadString);
// }

// // Called when the connection is made
// function onConnect(){
// 	console.log("Connected!");
// 	client.subscribe("rekathon/vegeboyz");
// }

// // Connect the client, providing an onConnect callback
// client.connect({
// 	onSuccess: onConnect,
// 	userName : "jovi",
// 	password : "lee"
// });

// set callback handlers
client.onConnectionLost = onConnectionLost;
client.onMessageArrived = onMessageArrived;

// connect the client
client.connect({
	onSuccess: onConnect
});

// called when the client connects
function onConnect() {
  // Once a connection has been made, make a subscription and send a message.useSSL: true
  console.log("onConnect");

  /*var subscribeOptions = {
	qos: 0,  // QoS
	invocationContext: {foo: true},  // Passed to success / failure callback
	onSuccess: onSuccessCallback,
	onFailure: onFailureCallback,
	timeout: 10
};*/
client.subscribe("rekathon/vegeboyz");
   //client.subscribe("/World");
   // message = new Paho.MQTT.Message("Hello");
   // message.destinationName = "rekathon/vegeboyz";
   // client.send(message); 
}

// called when the client loses its connection
function onConnectionLost(responseObject) {
	if (responseObject.errorCode !== 0) {
		console.log("onConnectionLost:"+responseObject.errorMessage);
	}
}

var temperature = [];
var humid = [];
var soils = [];

// called when a message arrives
function onMessageArrived(message) {
	d = new Date();
	n = d.getTime();

	var parts = message.payloadString.split(" ");
	soil = parts[0];
	temp = parts[1];
	humidity = parts[2];
	temperature.push(temp);
	humid.push(humidity);
	soils.push(soil);
	// requestTemp();
	// requestHumidity();
	// requestSoil();
} 

function checkStatus(temp,humidity,soil) {
	if (temp > 34){
		addNotification("The temperature of the area 12 is high");
	}
	if (temp < 20){
		addNotification("The temperature of the area 12 very chill");
	}
	if (humidity > 34){
		addNotification("The s of the area 12 is high");
	}
	if (humidity < 20){
		addNotification("The temperature of the area 12 very chill");
	}
	if (soil > 700){
		addNotification("The soil moisture level of the area 12 is too low");
	}
	if (soil < 300){
		addNotification("The soil moisture level of the area 12 is too high");
	}
}


function addNotification(issue) {
	var d = new Date();

	$("notifications-group").append("<a href="+"#"+" class="+"list-group-item"+">"+issue+"<span class="+"pull-right text-muted small"+"><em>"+ d.getHours() +":"+"d.getMinutes()"+":"+"d.getSeconds()"+"</em></span></a>");
}




var chart;
var secondChart;
var thirdChart;

/**
 * Request data from the server, add it to the graph and set a timeout
 * to request again
 */

 function requestTemp() {

 	console.log(temp)

 	point = [n, temp];


 	var series = chart.series[0],
            shift = series.data.length > 20; // shift if the series is
                                                 // longer than 20
            // add the point
            // chart.series[0].addPoint(point, true, shift);
            // call it again after one second
            // setTimeout(requestTemp, 1000);

        }

        function requestHumidity() {
        	console.log(humidity)

        	point = [n, humidity];

        	var series = chart.series[0],
                shift = series.data.length > 20; // shift if the series is
                                                 // longer than 20
            // add the point
            // secondChart.series[0].addPoint(point, true, shift);
            // call it again after one second
            // setTimeout(requestHumidity, 1000);
        }

        function requestSoil() {
        	console.log(soil)

        	point = [n, soil];

        	var series = chart.series[0],
                shift = series.data.length > 20; // shift if the series is
                                                 // longer than 20
            // add the point
            // thirdChart.series[0].addPoint(point, true, shift);
            // call it again after one second
            // setTimeout(requestSoil, 1000);
        }

        function rand() {
        	return Math.random();
        }

        $(document).ready(function() {


        	var temp = 0, humidity = 0, soil = 0;

        	Plotly.plot('data-container', [{
        		y: [0]
        	}]);

        	var cnt1 = 0;

        	var interval = setInterval(function() {

        			cnt1++;
        			if(cnt1 > 5) {
        				Plotly.relayout('data-container',
        				{
        					'xaxis.range': [cnt1 - 5, cnt1]
        				})
        			}

        			Plotly.extendTraces('data-container',
        			{
        				y: [temperature]
        			}, [0])
        		}, 1000);
             

             //CHart B
             Plotly.plot('chartB', [{
        		y: [0]
        	}]);

        	var cnt2 = 0;

        	var interval = setInterval(function() {

        			cnt2++;
        			if(cnt2 > 5) {
        				Plotly.relayout('chartB',
        				{
        					'xaxis.range': [cnt2 - 5, cnt2]
        				})
        			}

        			Plotly.extendTraces('chartB',
        			{
        				y: [humid]
        			}, [0])
        		}, 1000);


        	//Chart C
        	Plotly.plot('chartC', [{
        		y: [0]
        	}]);

        	var cnt = 0;

        	var interval = setInterval(function() {

        			cnt++;
        			if(cnt > 5) {
        				Plotly.relayout('chartC',
        				{
        					'xaxis.range': [cnt - 5, cnt]
        				})
        			}

        			Plotly.extendTraces('chartC',
        			{
        				y: [soils]
        			}, [0])
        		}, 1000);

        });

        // 	chart = new Highcharts.Chart({
        // 		chart: {
        // 			renderTo: 'data-container',
        // 			defaultSeriesType: 'spline',
        // 			events: {

        // 			}
        // 		},
        // 		title: {
        // 			text: 'Temperature Data'
        // 		},
        // 		xAxis: {
        // 			type: 'datetime',
        // 			tickPixelInterval: 150,
        // 			maxZoom: 20 * 1000
        // 		},
        // 		yAxis: {
        // 			minPadding: 0.2,
        // 			maxPadding: 0.2,
        // 			title: {
        // 				text: 'Value',
        // 				margin: 80
        // 			}
        // 		},
        // 		series: [{
        // 			name: 'Temperature',
        // 			data: []
        // 		}]
        // 	});


        // 	Highcharts.setOptions({
        // 		global: {
        // 			useUTC: false
        // 		}
        // 	});

        // 	secondChart = Highcharts.chart('chartB', {
        // 		chart: {
        // 			renderTo: 'data-container',
        // 			defaultSeriesType: 'spline',
        // 			marginRight: 10,
        //             events: {

        //             }
        // 		},
        // 		title: {
        // 			text: 'Humidity data'
        // 		},
        // 		xAxis: {
        // 			type: 'datetime',
        // 			tickPixelInterval: 150,
        // 			maxZoom: 20 * 1000
        // 		},
        // 		yAxis: {
        // 			minPadding: 0.2,
        // 			maxPadding: 0.2,
        // 			title: {
        // 				text: 'Value',
        // 				margin: 80
        // 			}
        // 		},
        // 		series: [{
        // 			name: 'Humidity',
        // 			data: []
        // 		}]
        // 	});

        // 	thirdChart = Highcharts.chart('chartC', {
        // 		chart: {
        // 			renderTo: 'data-container',
        // 			defaultSeriesType: 'spline',
        // 			events: {
        // 			}
        // 		},
        // 		title: {
        // 			text: 'Soil Moisture Data'
        // 		},
        // 		xAxis: {
        // 			type: 'datetime',
        // 			tickPixelInterval: 150,
        // 			maxZoom: 20 * 1000
        // 		},
        // 		yAxis: {
        // 			minPadding: 0.2,
        // 			maxPadding: 0.2,
        // 			title: {
        // 				text: 'Value',
        // 				margin: 80
        // 			}
        // 		},
        // 		series: [{
        // 			name: 'Soil Moisture',
        // 			data: []
        // 		}]
        // 	});
        // });






    </script>
